# CMakeLists.txt
#
# Copyright 2013-2018 by
# David Turner, Robert Wilhelm, and Werner Lemberg.
#
# Written originally by John Cary <cary@txcorp.com>
#
# This file is part of the FreeType project, and may only be used, modified,
# and distributed under the terms of the FreeType project license,
# LICENSE.TXT.  By continuing to use, modify, or distribute this file you
# indicate that you have read the license and understand and accept it
# fully.
#
#
# The following will 1. create a build directory and 2. change into it and
# call cmake to configure the build with default parameters as a static
# library.
#
#   cmake -E make_directory build
#   cmake -E chdir build cmake ..
#
# For a dynamic library, use
#
#   cmake -E chdir build cmake -D BUILD_SHARED_LIBS:BOOL=true ..
#
# For a framework on OS X, use
#
#   cmake -E chdir build cmake -G Xcode -D BUILD_FRAMEWORK:BOOL=true ..
#
# For an iOS static library, use
#
#   cmake -E chdir build cmake -G Xcode -D IOS_PLATFORM=OS ..
#
# or
#
#   cmake -E chdir build cmake -G Xcode -D IOS_PLATFORM=SIMULATOR ..
#
# Finally, build the project with:
#
#   cmake --build build
#
# Install it with
#
#   (sudo) cmake --build build --target install
#
# A binary distribution can be made with
#
#   cmake --build build --config Release --target package
#
# Please refer to the cmake manual for further options, in particular, how
# to modify compilation and linking parameters.
#
# Some notes.
#
# . `cmake' creates configuration files in
#
#     <build-directory>/include/freetype/config
#
#   which should be further modified if necessary.
#
# . You can use `cmake' directly on a freshly cloned FreeType git
#   repository.
#
# . `CMakeLists.txt' is provided as-is since it is normally not used by the
#   developer team.
#
# . Set the `FT_WITH_ZLIB', `FT_WITH_BZIP2', `FT_WITH_PNG', and
#   `FT_WITH_HARFBUZZ' CMake variables to `ON' to force using a dependency.
#   Leave a variable undefined (which is the default) to use the dependency
#   only if it is available.  Set `CMAKE_DISABLE_FIND_PACKAGE_HarfBuzz=TRUE' to
#   disable a dependency completely (CMake package name, so `BZip2' instead of
#   `BZIP2'). Example:
#
#     cmake -DFT_WITH_ZLIB=ON -DCMAKE_DISABLE_FIND_PACKAGE_HarfBuzz=TRUE [...]
#
# . Installation of FreeType can be controlled with the CMake variables
#   `SKIP_INSTALL_HEADERS', `SKIP_INSTALL_LIBRARIES', and `SKIP_INSTALL_ALL'
#   (this is compatible with the same CMake variables in zlib's CMake
#   support).

# FreeType explicitly marks the API to be exported and relies on the compiler
# to hide all other symbols. CMake supports a C_VISBILITY_PRESET property
# starting with 2.8.12.

message(STATUS "=====ENTERING FREETYPE CMAKELISTS===================")
message(STATUS " ZLIB FOUND HERE IS: ${ZLIB_FOUND}")
message(STATUS "====================================================")

set(FREE_SOURCE_DIR ${CMAKE_SOURCE_DIR}/ExternalLibs/freetype-2.9.1)

cmake_minimum_required(VERSION 2.8.12)

if (NOT CMAKE_VERSION VERSION_LESS 3.3)
  # Allow symbol visibility settings also on static libraries. CMake < 3.3
  # only sets the propery on a shared library build.
  cmake_policy(SET CMP0063 NEW)
endif ()

include(CheckIncludeFile)

# CMAKE_TOOLCHAIN_FILE must be set before `project' is called, which
# configures the base build environment and references the toolchain file
if (APPLE)
  if (DEFINED IOS_PLATFORM)
    if (NOT "${IOS_PLATFORM}" STREQUAL "OS"
        AND NOT "${IOS_PLATFORM}" STREQUAL "SIMULATOR")
      message(FATAL_ERROR
        "IOS_PLATFORM must be set to either OS or SIMULATOR")
    endif ()
    if (NOT "${CMAKE_GENERATOR}" STREQUAL "Xcode")
      message(AUTHOR_WARNING
        "You should use Xcode generator with IOS_PLATFORM enabled to get Universal builds.")
    endif ()
    if (BUILD_SHARED_LIBS)
      message(FATAL_ERROR
        "BUILD_SHARED_LIBS can not be on with IOS_PLATFORM enabled")
    endif ()
    if (BUILD_FRAMEWORK)
      message(FATAL_ERROR
        "BUILD_FRAMEWORK can not be on with IOS_PLATFORM enabled")
    endif ()

    # iOS only uses static libraries
    set(BUILD_SHARED_LIBS OFF)

    set(CMAKE_TOOLCHAIN_FILE
      ${FREE_SOURCE_DIR}/builds/cmake/iOS.cmake)
  endif ()
else ()
  if (DEFINED IOS_PLATFORM)
    message(FATAL_ERROR "IOS_PLATFORM is not supported on this platform")
  endif ()
endif ()


#sal project(freetype C)

set(VERSION_MAJOR "2")
set(VERSION_MINOR "9")
set(VERSION_PATCH "1")

# SOVERSION scheme: CURRENT.AGE.REVISION
#   If there was an incompatible interface change:
#     Increment CURRENT. Set AGE and REVISION to 0
#   If there was a compatible interface change:
#     Increment AGE. Set REVISION to 0
#   If the source code was changed, but there were no interface changes:
#     Increment REVISION.
set(LIBRARY_VERSION "6.16.0")
set(LIBRARY_SOVERSION "6")

# These options mean "require x and complain if not found". They'll get
# optionally found anyway. Use `-DCMAKE_DISABLE_FIND_PACKAGE_x=TRUE` to disable
# searching for a packge entirely (x is the CMake package name, so "BZip2"
# instead of "BZIP2").
option(FT_WITH_ZLIB "Use system zlib instead of internal library." OFF)
option(FT_WITH_BZIP2 "Support bzip2 compressed fonts." OFF)
option(FT_WITH_PNG "Support PNG compressed OpenType embedded bitmaps." OFF)
option(FT_WITH_HARFBUZZ "Improve auto-hinting of OpenType fonts." OFF)


# Disallow in-source builds
if ("${PROJECT_BINARY_DIR}" STREQUAL "${FREE_SOURCE_DIR}")
  message(FATAL_ERROR
    "In-source builds are not permitted!  Make a separate folder for"
    " building, e.g.,\n"
    "  cmake -E make_directory build\n"
    "  cmake -E chdir build cmake ..\n"
    "Before that, remove the files created by this failed run with\n"
    "  cmake -E remove CMakeCache.txt\n"
    "  cmake -E remove_directory CMakeFiles")
endif ()


# Add local cmake modules
list(APPEND CMAKE_MODULE_PATH ${FREE_SOURCE_DIR}/builds/cmake)


if (BUILD_FRAMEWORK)
  if (NOT "${CMAKE_GENERATOR}" STREQUAL "Xcode")
    message(FATAL_ERROR
      "You should use Xcode generator with BUILD_FRAMEWORK enabled")
  endif ()
  set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD_32_64_BIT)")
  set(BUILD_SHARED_LIBS ON)
endif ()


# Find dependencies
if (FT_WITH_HARFBUZZ)
  find_package(HarfBuzz 1.3.0 REQUIRED)
else ()
  find_package(HarfBuzz 1.3.0)
endif ()

if (FT_WITH_PNG)
  find_package(PNG REQUIRED)
else ()
  find_package(PNG)
endif ()

if (FT_WITH_ZLIB)
  find_package(ZLIB REQUIRED)
else ()
  find_package(ZLIB)
endif ()

if (FT_WITH_BZIP2)
  find_package(BZip2 REQUIRED)
else ()
  find_package(BZip2)
endif ()

# Create the configuration file
if (UNIX)
  check_include_file("unistd.h" HAVE_UNISTD_H)
  check_include_file("fcntl.h" HAVE_FCNTL_H)
  check_include_file("stdint.h" HAVE_STDINT_H)

  file(READ "${FREE_SOURCE_DIR}/builds/unix/ftconfig.in"
    FTCONFIG_H)
  if (HAVE_UNISTD_H)
    string(REGEX REPLACE
      "#undef +(HAVE_UNISTD_H)" "#define \\1 1"
      FTCONFIG_H "${FTCONFIG_H}")
  endif ()
  if (HAVE_FCNTL_H)
    string(REGEX REPLACE
      "#undef +(HAVE_FCNTL_H)" "#define \\1 1"
      FTCONFIG_H "${FTCONFIG_H}")
  endif ()
  if (HAVE_STDINT_H)
    string(REGEX REPLACE
      "#undef +(HAVE_STDINT_H)" "#define \\1 1"
      FTCONFIG_H "${FTCONFIG_H}")
  endif ()
  string(REPLACE "/undef " "#undef "
    FTCONFIG_H "${FTCONFIG_H}")
  file(WRITE "${PROJECT_BINARY_DIR}/include/freetype/config/ftconfig.h"
    "${FTCONFIG_H}")

endif ()


# Create the options file
file(READ "${FREE_SOURCE_DIR}/include/freetype/config/ftoption.h"
  FTOPTION_H)
if (ZLIB_FOUND)
  string(REGEX REPLACE
    "/\\* +(#define +FT_CONFIG_OPTION_SYSTEM_ZLIB) +\\*/" "\\1"
    FTOPTION_H "${FTOPTION_H}")

endif ()
if (BZIP2_FOUND)
  string(REGEX REPLACE
    "/\\* +(#define +FT_CONFIG_OPTION_USE_BZIP2) +\\*/" "\\1"
    FTOPTION_H "${FTOPTION_H}")
endif ()
if (PNG_FOUND)
  string(REGEX REPLACE
    "/\\* +(#define +FT_CONFIG_OPTION_USE_PNG) +\\*/" "\\1"
    FTOPTION_H "${FTOPTION_H}")
endif ()
if (HARFBUZZ_FOUND)
  string(REGEX REPLACE
    "/\\* +(#define +FT_CONFIG_OPTION_USE_HARFBUZZ) +\\*/" "\\1"
    FTOPTION_H "${FTOPTION_H}")
endif ()
message (STATUS "WILL CREATE FREETYPE OPTIONS FILE")

file(WRITE "${PROJECT_BINARY_DIR}/include/freetype/config/ftoption.h"
  "${FTOPTION_H}")

set(NEW_OPTTION_FILE ${PROJECT_BINARY_DIR}/include/freetype/config/ftoption.h)
set(NEW_HEADER_FILE ${PROJECT_BINARY_DIR}/include/freetype/config/fheader.h)
message(STATUS "WRITING ftoption.h to: ${PROJECT_BINARY_DIR}/include/freetype/config/ftoption.h")
configure_file(${CMAKE_SOURCE_DIR}/ExternalLibs/freetype-2.9.1/include/freetype/config/ftmodule.h ${PROJECT_BINARY_DIR}/include/freetype/config/ftmodule.h COPYONLY)
configure_file(${CMAKE_SOURCE_DIR}/ExternalLibs/freetype-2.9.1/include/freetype/config/ftstdlib.h ${PROJECT_BINARY_DIR}/include/freetype/config/ftstdlib.h COPYONLY)




#redefine FT_CONFIG_OPTIONS_H
#necessary to make freetype use the generated ftoptions.h file and make freetype use the SGF zlib instead of its buit in one
file(READ "${FREE_SOURCE_DIR}/include/freetype/config/ftheader.h"
    NEW_FTOPTION_H)
string(REPLACE
    "freetype/config/ftoption.h"
    "${NEW_OPTTION_FILE}"
    NEW_FTOPTION_H "${NEW_FTOPTION_H}")

file(WRITE "${PROJECT_BINARY_DIR}/include/freetype/config/fheader.h"
  "${NEW_FTOPTION_H}")

#redefine ft2build.h


if(EXISTS ${FREE_SOURCE_DIR}/include/ft2build.h)


file(READ "${FREE_SOURCE_DIR}/include/ft2build.h"
    NEW_FT2BUILD_H)
string(REPLACE
    "freetype/config/ftheader.h"
    "${NEW_HEADER_FILE}"
    NEW_FT2BUILD_H "${NEW_FT2BUILD_H}")

else()

file(READ "${FREE_SOURCE_DIR}/include/ft2build-orig.h"
    NEW_FT2BUILD_H)
string(REPLACE
    "freetype/config/ftheader.h"
    "${NEW_HEADER_FILE}"
    NEW_FT2BUILD_H "${NEW_FT2BUILD_H}")

endif(${FREE_SOURCE_DIR}/include/ft2build.h)


file(WRITE "${PROJECT_BINARY_DIR}/include/freetype/config/ft2build.h"
  "${NEW_FT2BUILD_H}")

#load the headers whit the new ones in FREE_PUBLIC_CONFIG_HEADERS
file(GLOB FREE_PUBLIC_HEADERS "include/ft2build.h" "include/freetype/*.h")
#file(GLOB FREE_PUBLIC_CONFIG_HEADERS "include/freetype/config/*.h")
file(GLOB FREE_PUBLIC_CONFIG_HEADERS "${PROJECT_BINARY_DIR}/include/freetype/config/*.h")
file(GLOB FREE_PRIVATE_HEADERS "include/freetype/internal/*.h")


set(FREE_BASE_SRCS
  ${FREE_SOURCE_DIR}/src/autofit/autofit.c
  ${FREE_SOURCE_DIR}/src/base/ftbase.c
  ${FREE_SOURCE_DIR}/src/base/ftbbox.c
  ${FREE_SOURCE_DIR}/src/base/ftbdf.c
  ${FREE_SOURCE_DIR}/src/base/ftbitmap.c
  ${FREE_SOURCE_DIR}/src/base/ftcid.c
  ${FREE_SOURCE_DIR}/src/base/ftfstype.c
  ${FREE_SOURCE_DIR}/src/base/ftgasp.c
  ${FREE_SOURCE_DIR}/src/base/ftglyph.c
  ${FREE_SOURCE_DIR}/src/base/ftgxval.c
  ${FREE_SOURCE_DIR}/src/base/ftinit.c
  ${FREE_SOURCE_DIR}/src/base/ftmm.c
  ${FREE_SOURCE_DIR}/src/base/ftotval.c
  ${FREE_SOURCE_DIR}/src/base/ftpatent.c
  ${FREE_SOURCE_DIR}/src/base/ftpfr.c
  ${FREE_SOURCE_DIR}/src/base/ftstroke.c
  ${FREE_SOURCE_DIR}/src/base/ftsynth.c
  ${FREE_SOURCE_DIR}/src/base/ftsystem.c
  ${FREE_SOURCE_DIR}/src/base/fttype1.c
  ${FREE_SOURCE_DIR}/src/base/ftwinfnt.c
  ${FREE_SOURCE_DIR}/src/bdf/bdf.c
  ${FREE_SOURCE_DIR}/src/bzip2/ftbzip2.c
  ${FREE_SOURCE_DIR}/src/cache/ftcache.c
  ${FREE_SOURCE_DIR}/src/cff/cff.c
  ${FREE_SOURCE_DIR}/src/cid/type1cid.c
  ${FREE_SOURCE_DIR}/src/gzip/ftgzip.c
  ${FREE_SOURCE_DIR}/src/lzw/ftlzw.c
  ${FREE_SOURCE_DIR}/src/pcf/pcf.c
  ${FREE_SOURCE_DIR}/src/pfr/pfr.c
  ${FREE_SOURCE_DIR}/src/psaux/psaux.c
  ${FREE_SOURCE_DIR}/src/pshinter/pshinter.c
  ${FREE_SOURCE_DIR}/src/psnames/psnames.c
  ${FREE_SOURCE_DIR}/src/raster/raster.c
  ${FREE_SOURCE_DIR}/src/sfnt/sfnt.c
  ${FREE_SOURCE_DIR}/src/smooth/smooth.c
  ${FREE_SOURCE_DIR}/src/truetype/truetype.c
  ${FREE_SOURCE_DIR}/src/type1/type1.c
  ${FREE_SOURCE_DIR}/src/type42/type42.c
  ${FREE_SOURCE_DIR}/src/winfonts/winfnt.c
)

if (WIN32)
  enable_language(RC)
  list(APPEND FREE_BASE_SRCS builds/windows/ftdebug.c
                        ${FREE_SOURCE_DIR}/src/base/ftver.rc)
elseif (WINCE)
  list(APPEND FREE_BASE_SRCS builds/wince/ftdebug.c)
else ()
  list(APPEND FREE_BASE_SRCS ${FREE_SOURCE_DIR}/src/base/ftdebug.c)
endif ()

if (BUILD_FRAMEWORK)
  list(APPEND FREE_BASE_SRCS builds/mac/freetype-Info.plist)
endif ()


if (NOT DISABLE_FORCE_DEBUG_POSTFIX)
  set(CMAKE_DEBUG_POSTFIX d)
endif()


#sal add_library(freetype
#sal   ${FREE_PUBLIC_HEADERS}
#sal   ${FREE_PUBLIC_CONFIG_HEADERS}
#sal   ${FREE_PRIVATE_HEADERS}
#sal   ${FREE_BASE_SRCS}
#sal )

#sal set_target_properties(
#sal   freetype PROPERTIES
#sal     C_VISIBILITY_PRESET hidden)

#sal target_compile_definitions(
#sal   freetype PRIVATE FT2_BUILD_LIBRARY)

if (WIN32)
  target_compile_definitions(
    freetype PRIVATE _CRT_SECURE_NO_WARNINGS _CRT_NONSTDC_NO_WARNINGS)
endif ()

if (BUILD_SHARED_LIBS)
 #sal  set_target_properties(freetype PROPERTIES
 #sal    VERSION ${LIBRARY_VERSION}
  #sal   SOVERSION ${LIBRARY_SOVERSION})
endif ()

#sal target_include_directories(
#sal   freetype BEFORE  # Pick up ftconfig.h and ftoption.h generated above.
#sal     PRIVATE "${PROJECT_BINARY_DIR}/include")

#sal target_include_directories(
#sal   freetype
#sal     PRIVATE "${FREE_SOURCE_DIR}/include")

#sal target_include_directories(
#sal   freetype
#sal     PUBLIC $<INSTALL_INTERFACE:include/freetype2>)

if (BUILD_FRAMEWORK)
  set_property(SOURCE ${FREE_PUBLIC_CONFIG_HEADERS}
    PROPERTY MACOSX_PACKAGE_LOCATION Headers/config
  )
  set_target_properties(freetype PROPERTIES
    FRAMEWORK TRUE
    MACOSX_FRAMEWORK_INFO_PLIST builds/mac/freetype-Info.plist
    PUBLIC_HEADER "${FREE_PUBLIC_HEADERS}"
    XCODE_ATTRIBUTE_INSTALL_PATH "@rpath"
  )
endif ()


set(PKG_CONFIG_REQUIRED_PRIVATE "")

if (ZLIB_FOUND)
#sal   target_link_libraries(freetype PRIVATE ${ZLIB_LIBRARIES})
#sal   target_include_directories(freetype PRIVATE ${ZLIB_INCLUDE_DIRS})
#sal   list(APPEND PKG_CONFIG_REQUIRED_PRIVATE zlib)
endif ()
if (BZIP2_FOUND)
#sal   target_link_libraries(freetype PRIVATE ${BZIP2_LIBRARIES})
#sal   target_include_directories(freetype PRIVATE ${BZIP2_INCLUDE_DIR}) # not BZIP2_INCLUDE_DIRS
#sal   list(APPEND PKG_CONFIG_REQUIRED_PRIVATE bzip2)
endif ()
if (PNG_FOUND)
#sal   target_link_libraries(freetype PRIVATE ${PNG_LIBRARIES})
#sal   target_compile_definitions(freetype PRIVATE ${PNG_DEFINITIONS})
#sal   target_include_directories(freetype PRIVATE ${PNG_INCLUDE_DIRS})
  list(APPEND PKG_CONFIG_REQUIRED_PRIVATE libpng)
endif ()
if (HARFBUZZ_FOUND)
  target_link_libraries(freetype PRIVATE ${HARFBUZZ_LIBRARIES})
  target_include_directories(freetype PRIVATE ${HARFBUZZ_INCLUDE_DIRS})
  list(APPEND PKG_CONFIG_REQUIRED_PRIVATE harfbuzz)
endif ()


# Installation
include(GNUInstallDirs)

if (NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL)
  install(
    # Note the trailing slash in the argument to `DIRECTORY'!
    DIRECTORY ${FREE_SOURCE_DIR}/include/
      DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/freetype2
      COMPONENT headers
      PATTERN "internal" EXCLUDE
      PATTERN "ftconfig.h" EXCLUDE
      PATTERN "ftoption.h" EXCLUDE)
  install(
    FILES ${PROJECT_BINARY_DIR}/include/freetype/config/ftconfig.h
          ${PROJECT_BINARY_DIR}/include/freetype/config/ftoption.h
      DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/freetype2/freetype/config
      COMPONENT headers)
endif ()

if (NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL)
  # Generate the pkg-config file
  if (UNIX)
    file(READ ${FREE_SOURCE_DIR}/builds/unix/freetype2.in FREETYPE2_PC_IN)

    string(REPLACE ";" ", " PKG_CONFIG_REQUIRED_PRIVATE "${PKG_CONFIG_REQUIRED_PRIVATE}")

    string(REPLACE "%prefix%" ${CMAKE_INSTALL_PREFIX}
           FREETYPE2_PC_IN ${FREETYPE2_PC_IN})
    string(REPLACE "%exec_prefix%" "\${prefix}"
           FREETYPE2_PC_IN ${FREETYPE2_PC_IN})
    string(REPLACE "%libdir%" "\${prefix}/${CMAKE_INSTALL_LIBDIR}"
           FREETYPE2_PC_IN ${FREETYPE2_PC_IN})
    string(REPLACE "%includedir%" "\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}"
           FREETYPE2_PC_IN ${FREETYPE2_PC_IN})
    string(REPLACE "%ft_version%" "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
           FREETYPE2_PC_IN ${FREETYPE2_PC_IN})
    string(REPLACE "%REQUIRES_PRIVATE%" "${PKG_CONFIG_REQUIRED_PRIVATE}"
           FREETYPE2_PC_IN ${FREETYPE2_PC_IN})
    string(REPLACE "%LIBS_PRIVATE%" ""  # All libs support pkg-config
           FREETYPE2_PC_IN ${FREETYPE2_PC_IN})

    file(WRITE ${PROJECT_BINARY_DIR}/freetype2.pc ${FREETYPE2_PC_IN})

    install(
      FILES ${PROJECT_BINARY_DIR}/freetype2.pc
      DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
      COMPONENT pkgconfig)
  endif ()

#sal   install(
#sal     TARGETS freetype
#sal       EXPORT freetype-targets
#sal       LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
#sal       ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
#sal       FRAMEWORK DESTINATION Library/Frameworks
#sal       COMPONENT libraries)
#sal   install(
#sal     EXPORT freetype-targets
#sal       DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/freetype
#sal       FILE freetype-config.cmake
#sal       COMPONENT headers)
endif ()


# Packaging
set(CPACK_PACKAGE_NAME ${CMAKE_PROJECT_NAME})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "The FreeType font rendering library.")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${FREE_SOURCE_DIR}/README")
set(CPACK_RESOURCE_FILE_LICENSE "${FREE_SOURCE_DIR}/docs/LICENSE.TXT")

set(CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH})
set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")

if (WIN32)
  set(CPACK_GENERATOR ZIP)
else()
  set(CPACK_GENERATOR TGZ)
endif()

set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME "Libraries")
set(CPACK_COMPONENT_HEADERS_DISPLAY_NAME "C/C++ Headers")
set(CPACK_COMPONENT_LIBRARIES_DESCRIPTION
  "Library used to build programs which use FreeType")
set(CPACK_COMPONENT_HEADERS_DESCRIPTION
  "C/C++ header files for use with FreeType")
set(CPACK_COMPONENT_HEADERS_DEPENDS libraries)
set(CPACK_COMPONENT_LIBRARIES_GROUP "Development")
set(CPACK_COMPONENT_HEADERS_GROUP "Development")

include(CPack)
